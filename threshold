import cv2
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

# 读取图像
image = cv2.imread('steelbar.png')  # 替换为你的图像路径

# 检查图像是否成功加载
if image is None:
    print("错误：无法读取图像，请检查文件路径")
else:
    # 将BGR图像转换为RGB（Matplotlib使用RGB）
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # 将图像转换为灰度图
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
      
    # 1. 固定阈值法
    threshold_value = 100  # 设置阈值
    _, binary_fixed = cv2.threshold(gray, threshold_value, 255, cv2.THRESH_BINARY)


    # 2. OTSU阈值法（自动计算最佳阈值）
    _, binary_otsu = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    # 计算OTSU方法找到的最佳阈值
    otsu_threshold = _  # 下划线捕获了OTSU方法返回的阈值
    
    # 创建2x2的子图布局
    plt.figure(figsize=(15, 12))
    
    # 显示原始彩色图像
    plt.subplot(2, 2, 1)
    plt.imshow(image_rgb)
    plt.title('orignal ')
    plt.axis('off')
    
    # 显示灰度图像
    plt.subplot(2, 2, 2)
    plt.imshow(gray, cmap='gray')
    plt.title('gray')
    plt.axis('off')
    
    # 显示固定阈值二值化结果
    plt.subplot(2, 2, 3)
    plt.imshow(binary_fixed, cmap='gray')
    plt.title(f'fixed threshold  binary (Threshold={threshold_value})')
    plt.axis('off')
    
    # 显示OTSU阈值二值化结果
    plt.subplot(2, 2, 4)
    plt.imshow(binary_otsu, cmap='gray')
    plt.title(f'OTSU binary (otsu_threshold={otsu_threshold:.1f})')
    plt.axis('off')

   
    # 调整子图间距
    plt.tight_layout()
    plt.show()
